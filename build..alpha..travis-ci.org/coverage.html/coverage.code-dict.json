{"/home/travis/build/npmtest/node-npmtest-mongo-relation/test.js":"/* istanbul instrument in package npmtest_mongo_relation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-relation/lib.npmtest_mongo_relation.js":"/* istanbul instrument in package npmtest_mongo_relation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongo_relation = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongo_relation = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-relation/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongo-relation && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongo_relation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongo_relation\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongo_relation.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_mongo_relation.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongo_relation.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_mongo_relation.__dirname +\n                    '/lib.npmtest_mongo_relation.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-relation/node_modules/mongo-relation/index.js":"module.exports = require('./lib/');","/home/travis/build/npmtest/node-npmtest-mongo-relation/node_modules/mongo-relation/lib/index.js":"module.exports = require('./relationships');","/home/travis/build/npmtest/node-npmtest-mongo-relation/node_modules/mongo-relation/lib/relationships.js":"var mongoose = require('mongoose'), Schema = mongoose.Schema, ObjectId = Schema.ObjectId, MongooseArray = mongoose.Types.Array, utils = require('./utils'), merge = utils.merge, pluralize = utils.pluralize;\n/**\n * Adds the relationship to the Schema's path\n * and creates the path if necessary\n *\n * @param {Object} relationship\n * @return {Schema}\n * @api private\n */\nSchema.prototype._addRelationship = function (type, model, options) {\n  if (!model)\n    throw new Error('Model name needed');\n  var array = type === 'hasMany' || type === 'habtm', pathName, cast = array ? [{\n        type: ObjectId,\n        index: true,\n        ref: model\n      }] : {\n      type: ObjectId,\n      index: true,\n      ref: model\n    };\n  if (options && options.through) {\n    pathName = options.through;\n  } else {\n    pathName = array ? pluralize(model.toLowerCase()) : model.toLowerCase();\n  }\n  if (!this.paths[pathName]) {\n    var path = {};\n    path[pathName] = cast;\n    this.add(path);\n  }\n  this.paths[pathName].options[type] = model;\n  if (options && options.dependent)\n    this.paths[pathName].options.dependent = options.dependent;\n  return this;\n};\n/**\n * Syntactic sugar to create the relationships\n *\n * @param {String} model [name of the model in the DB]\n * @param {Object} options [through, dependent]\n * @return {Schema}\n * @api public\n */\nSchema.prototype.belongsTo = function (model, options) {\n  this._addRelationship.call(this, 'belongsTo', model, options);\n};\nSchema.prototype.hasOne = function (model, options) {\n  this._addRelationship.call(this, 'hasOne', model, options);\n};\nSchema.prototype.hasMany = function (model, options) {\n  this._addRelationship.call(this, 'hasMany', model, options);\n};\nSchema.prototype.habtm = function (model, options) {\n  this._addRelationship.call(this, 'habtm', model, options);\n};\n/**\n * Finds the path referencing supplied model name\n *\n * @param {String} modelName\n * @param {String} type (optional)\n * @return {Object}\n *   @param {String} type\n *   @param {String} name\n * @api private\n */\nSchema.prototype._findPathReferencing = function (modelName, type) {\n  for (var path in this.paths) {\n    var options = this.paths[path].options;\n    if (type) {\n      if (options[type] && options[type] === modelName) {\n        return {\n          type: type,\n          name: path\n        };\n        break;\n      }\n    } else if (options.belongsTo === modelName || options.habtm === modelName) {\n      var type = Array.isArray(options.type) ? 'habtm' : 'belongsTo';\n      return {\n        type: type,\n        name: path\n      };\n      break;\n    }\n  }\n};\n/**\n * Check for presence of relationship\n */\nMongooseArray.prototype._hasRelationship = function () {\n  return this._schema && (this._schema.options.hasMany || this._schema.options.habtm || this._schema.options.hasOne);\n};\n/**\n * Figure out the relationship\n *\n * @return {Object}\n *   @param {String} type\n *   @param {String} ref\n *   @param {Object} options\n * @api private\n */\nMongooseArray.prototype._getRelationship = function () {\n  var schemaOpts = this._schema.options, type, ref, options = {};\n  if (schemaOpts.hasMany) {\n    type = 'hasMany';\n    ref = schemaOpts.hasMany;\n  }\n  if (schemaOpts.hasOne) {\n    type = 'hasOne';\n    ref = schemaOpts.hasOne;\n  }\n  if (schemaOpts.habtm) {\n    type = 'habtm';\n    ref = schemaOpts.habtm;\n  }\n  if (schemaOpts.dependent)\n    options.dependent = schemaOpts.dependent;\n  return {\n    type: type,\n    ref: ref,\n    options: options\n  };\n};\n/**\n * Builds the instance of the child element\n *\n * @param {Object|Array} objs\n * @return {Document|Array}\n * @api public\n */\nMongooseArray.prototype.build = function (objs) {\n  if (!this._hasRelationship())\n    throw new Error('Path doesn\\'t contain a reference');\n  var self = this, parent = this._parent, childModelName = this._schema.options.hasMany || this._schema.options.habtm, childModel = parent.model(childModelName), childSchema = childModel.schema, parentModelName = parent.constructor.modelName, childPath = childSchema._findPathReferencing(parentModelName);\n  var build = function (obj) {\n    obj = new childModel(obj);\n    // HABTM or belongsTo?\n    if (childPath.type === 'habtm')\n      obj[childPath.name].push(parent);\n    else\n      obj[childPath.name] = parent;\n    parent[self._path].push(obj);\n    return obj;\n  };\n  if (Array.isArray(objs)) {\n    return objs.map(function (obj) {\n      return build(obj);\n    });\n  }\n  return build(objs);\n};\n/**\n * Create a child document and add it to the parent `Array`\n *\n * @param {Object|Array} objs [object(s) to create]\n * @param {Functions} callback [passed: (err, parent, created children)]\n * @api public\n */\nMongooseArray.prototype.create = function (objs, callback) {\n  if (!this._hasRelationship())\n    return callback(new Error('Path doesn\\'t contain a reference'));\n  var self = this, parent = this._parent, childModelName = this._schema.options.hasMany || this._schema.options.habtm, childModel = parent.model(childModelName), childSchema = childModel.schema, parentModelName = parent.constructor.modelName, childPath = childSchema._findPathReferencing(parentModelName);\n  // You *need* a reference in the child `Document`\n  if (!childPath)\n    throw new Error('Parent model not referenced anywhere in the Child Schema');\n  // If we're provided an `Array`, we need to iterate\n  objs = this.build(objs);\n  if (Array.isArray(objs)) {\n    var created = [], total = objs.length;\n    objs.forEach(function (obj, i) {\n      obj.save(function (err, obj) {\n        if (err) {\n          // Empty the array and return the error,\n          // effectively breaking the loop.\n          objs.splice(i, objs.length - i);\n          return callback(err);\n        }\n        // Store the created records;\n        created.push(obj);\n        --total || parent.save(function (err, parent) {\n          if (err)\n            return callback(err);\n          return callback(null, parent, created);\n        });\n      });\n    });\n  } else {\n    // Only one object needs creation.\n    // Going for it then!\n    objs.save(function (err, obj) {\n      if (err)\n        return callback(err);\n      parent.save(function (err, parent) {\n        if (err)\n          return callback(err);\n        return callback(null, parent, obj);\n      });\n    });\n  }\n};\n/**\n * Find children documents\n *\n * *This is a copy of Model.find w/ added error throwing and such*\n */\nMongooseArray.prototype.find = function (conditions, fields, options, callback) {\n  if (!this._hasRelationship())\n    return callback(new Error('Path doesn\\'t contain a reference'));\n  // Copied from `Model.find`\n  if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = {};\n    fields = null;\n    options = null;\n  } else if ('function' == typeof fields) {\n    callback = fields;\n    fields = null;\n    options = null;\n  } else if ('function' == typeof options) {\n    callback = options;\n    options = null;\n  } else {\n    conditions = {};\n  }\n  var parent = this._parent, childModel = parent.model(this._schema.options.hasMany || this._schema.options.habtm), childPath = childModel.schema._findPathReferencing(parent.constructor.modelName);\n  // You *need* a reference in the child `Document`\n  if (!childPath)\n    throw new Error('Parent model not referenced anywhere in the Child Schema');\n  var safeConditions = {};\n  safeConditions[childPath.name] = parent._id;\n  merge(safeConditions, conditions);\n  merge(safeConditions, { _id: { $in: parent[this._path] } });\n  //var query = new mongoose.Query(safeConditions, options).select(fields).bind(childModel, 'find');\n  var query = childModel.find(safeConditions, options).select(fields);\n  if ('undefined' === typeof callback)\n    return query;\n  return query.find(callback);\n};\n/**\n * Syntactic sugar to populate the array\n *\n * @param {Array} fields\n * @param {Function} callback\n * @return {Query}\n * @api public\n */\nMongooseArray.prototype.populate = function (fields, callback) {\n  if ('function' == typeof fields) {\n    callback = fields;\n    fields = null;\n  }\n  var parent = this._parent, model = parent.constructor, path = this._path, self = this;\n  return model.findById(parent._id).populate(path, fields).exec(callback);\n};\n/**\n * Overrides MongooseArray.remove\n * only for dependent:destroy relationships\n *\n * @param {ObjectId} id\n * @param {Function} callback\n * @return {ObjectId}\n * @api public\n */\nvar oldRemove = MongooseArray.prototype.remove;\nMongooseArray.prototype.remove = MongooseArray.prototype.delete = function (id, callback) {\n  var args = arguments, relationship = this._getRelationship();\n  if (id._id) {\n    var child = id;\n    id = child._id;\n  }\n  if (arguments[1] && typeof arguments[1] === 'function')\n    oldRemove.call(this, id);\n  else {\n    oldRemove.apply(this, arguments);\n  }\n  if (!callback || typeof arguments[1] !== 'function')\n    callback = function (err) {\n      if (err)\n        throw err;\n    };\n  var self = this, parent = this._parent, childModel = parent.model(relationship.ref);\n  if (relationship.options.dependent) {\n    if (relationship.type === 'habtm') {\n      if (relationship.options.dependent === 'delete' || relationship.options.dependent === 'nullify') {\n        if (child) {\n          var childPath = child._findPathReferencing(parent.constructor.modelName, 'habtm');\n          child[childPath.name].remove(parent._id);\n          child.save(function (err, child) {\n            if (err)\n              callback(err);\n            callback(null, parent);\n          });\n        } else {\n          childModel.findById(id, function (err, child) {\n            if (err)\n              return callback(err);\n            var childPath = child.schema._findPathReferencing(parent.constructor.modelName, 'habtm');\n            child[childPath.name].remove(parent._id);\n            child.save(function (err, child) {\n              if (err)\n                callback(err);\n              callback(null, parent);\n            });\n          });\n        }\n      }\n    } else {\n      if (relationship.options.dependent === 'delete') {\n        childModel.remove({ _id: id }, function (err) {\n          if (err)\n            return callback(err);\n          parent.save(callback);\n        });\n      } else if (relationship.options.dependent === 'nullify') {\n        if (child) {\n          var childPath = child._findPathReferencing(parent.constructor.modelName);\n          child.set(childPath.name, null);\n          child.save(function (err, child) {\n            if (err)\n              callback(err);\n            callback(null, parent);\n          });\n        } else {\n          childModel.findById(id, function (err, child) {\n            if (err)\n              return callback(err);\n            var childPath = child.schema._findPathReferencing(parent.constructor.modelName);\n            child.set(childPath.name, null);\n            child.save(function (err, child) {\n              if (err)\n                callback(err);\n              callback(null, parent);\n            });\n          });\n        }\n      }\n    }\n  } else {\n    callback(null, parent);\n  }\n};\n/**\n * Append an already instantiated document\n * saves it in the process.\n *\n * @param {Document} child\n * @param {Function} callback\n * @api public\n */\nMongooseArray.prototype.append = function (child, callback) {\n  var throwErr = function (message) {\n    if (callback)\n      return callback(new Error(message));\n    else\n      throw new Error(message);\n  };\n  if (!this._hasRelationship())\n    return throwErr('Path doesn\\'t contain a reference');\n  var relationship = this._getRelationship();\n  if (child.constructor.modelName !== relationship.ref)\n    return throwErr('Wrong Model type');\n  var childPath = child.schema._findPathReferencing(this._parent.constructor.modelName);\n  if (childPath.type === 'habtm')\n    child[childPath.name].push(this._parent._id);\n  else\n    child[childPath.name] = this._parent._id;\n  this._parent[this._path].push(child._id);\n  if (!callback)\n    return child;\n  return child.save(callback);\n};\n/**\n * Append many instantiated children documents\n *\n * @param {Array} children\n * @param {Function} callback\n * @api public\n */\nvar oldConcat = MongooseArray.prototype.concat;\nMongooseArray.prototype.concat = function (children, callback) {\n  if (!Array.isArray(children))\n    return callback(new Error('First argument needs to be an Array'));\n  var self = this, children = children.map(function (child) {\n      return self.append(child);\n    }), childrenIds = children.map(function (child) {\n      return child._id;\n    });\n  var total = children.length;\n  children.forEach(function (child) {\n    child.save(function (err, child) {\n      if (err) {\n        // Empty the array and return the error,\n        // effectively breaking the loop.\n        objs.splice(i, objs.length - i);\n        return callback(err);\n      }\n      --total || function () {\n        oldConcat.call(self, childrenIds);\n        self._markModified();\n        callback(null, children);\n      }();\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-relation/node_modules/mongo-relation/lib/utils.js":"/**\n * Merges `from` into `to` without overwriting\n * existing properties of `to`.\n *\n * @param {Object} to\n * @param {Object} from\n */\nexports.merge = function merge(to, from) {\n  var keys = Object.keys(from), i = keys.length, key;\n  while (i--) {\n    key = keys[i];\n    if ('undefined' === typeof to[key]) {\n      to[key] = from[key];\n    } else {\n      merge(to[key], from[key]);\n    }\n  }\n};\n/**\n * Generates a random string\n *\n * @api private\n */\nexports.random = function () {\n  return Math.random().toString().substr(3);\n};\n/**\n * Pluralization rules.\n */\nvar rules = [\n    [\n      /(m)an$/gi,\n      '$1en'\n    ],\n    [\n      /(pe)rson$/gi,\n      '$1ople'\n    ],\n    [\n      /(child)$/gi,\n      '$1ren'\n    ],\n    [\n      /^(ox)$/gi,\n      '$1en'\n    ],\n    [\n      /(ax|test)is$/gi,\n      '$1es'\n    ],\n    [\n      /(octop|vir)us$/gi,\n      '$1i'\n    ],\n    [\n      /(alias|status)$/gi,\n      '$1es'\n    ],\n    [\n      /(bu)s$/gi,\n      '$1ses'\n    ],\n    [\n      /(buffal|tomat|potat)o$/gi,\n      '$1oes'\n    ],\n    [\n      /([ti])um$/gi,\n      '$1a'\n    ],\n    [\n      /sis$/gi,\n      'ses'\n    ],\n    [\n      /(?:([^f])fe|([lr])f)$/gi,\n      '$1$2ves'\n    ],\n    [\n      /(hive)$/gi,\n      '$1s'\n    ],\n    [\n      /([^aeiouy]|qu)y$/gi,\n      '$1ies'\n    ],\n    [\n      /(x|ch|ss|sh)$/gi,\n      '$1es'\n    ],\n    [\n      /(matr|vert|ind)ix|ex$/gi,\n      '$1ices'\n    ],\n    [\n      /([m|l])ouse$/gi,\n      '$1ice'\n    ],\n    [\n      /(quiz)$/gi,\n      '$1zes'\n    ],\n    [\n      /s$/gi,\n      's'\n    ],\n    [\n      /$/gi,\n      's'\n    ]\n  ];\n/**\n * Uncountable words.\n */\nvar uncountables = [\n    'advice',\n    'energy',\n    'excretion',\n    'digestion',\n    'cooperation',\n    'health',\n    'justice',\n    'labour',\n    'machinery',\n    'equipment',\n    'information',\n    'pollution',\n    'sewage',\n    'paper',\n    'money',\n    'species',\n    'series',\n    'rain',\n    'rice',\n    'fish',\n    'sheep',\n    'moose',\n    'deer',\n    'news'\n  ];\n/**\n * Pluralize function.\n *\n * @author TJ Holowaychuk (extracted from _ext.js_)\n * @param {String} string to pluralize\n * @api private\n */\nexports.pluralize = function (str) {\n  var rule, found;\n  if (!~uncountables.indexOf(str.toLowerCase())) {\n    found = rules.filter(function (rule) {\n      return str.match(rule[0]);\n    });\n    if (found[0])\n      return str.replace(found[0][0], found[0][1]);\n  }\n  return str;\n};","/home/travis/build/npmtest/node-npmtest-mongo-relation/node_modules/mongo-relation/specs/belongsTo.spec.js":"require('./spec_helper');\n\nvar mongoose = require('mongoose'),\n    should   = require('should'),\n    User     = require('./support/userModel'),\n    Tweet    = require('./support/tweetModel'),\n    Tag      = require('./support/tagModel');\n\ndescribe('belongsTo', function() {\n  it('child schema belongsTo path', function() {\n    Tweet.schema.paths.author.options.belongsTo.should.equal('User');\n  });\n\n  it('sets the standard mongoose refs', function() {\n    Tweet.schema.paths.author.instance.should.equal('ObjectID');\n    Tweet.schema.paths.author.options.ref.should.equal('User');\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-mongo-relation/node_modules/mongo-relation/specs/spec_helper.js":"var mongoose      = require('mongoose'),\n    relationships = require('../');\n\nvar resetDb = function(next){\n  mongoose.connection.db.dropDatabase(function(err){\n    if(err)\n      throw(err);\n    else\n      next();\n  });\n};\n\nbeforeEach(function(done){\n  if(mongoose.get('isConnected')){\n    resetDb(done);\n  } else {\n    mongoose.connection.on('open', function(){\n      resetDb(done);\n    });\n  }\n});\n\nvar host = process.env.BOXEN_MONGODB_URL || process.env.MONGOOSE_TEST_URL || 'mongodb://localhost/';\nvar uri = host + 'mongo_relations_' + process.env.SEQ || '0';\n\nmongoose.connect(uri, function(){\n  mongoose.set('isConnected', true);\n});\n","/home/travis/build/npmtest/node-npmtest-mongo-relation/node_modules/mongo-relation/specs/hasAndBelongsToMany.spec.js":"require('./spec_helper');\n\nvar mongoose = require('mongoose'),\n    should   = require('should'),\n    User     = require('./support/userModel'),\n    Post     = require('./support/postModel'),\n    Category = require('./support/categoryModel');\n\ndescribe('hasManyBelongsToMany', function() {\n\n  it('has hasMany on the path', function() {\n    Category.schema.paths['posts'].options.habtm.should.equal('Post');\n  });\n\n  it('test child schema habtm path', function() {\n    Post.schema.paths['categories'].options.habtm.should.equal('Category');\n  });\n\n  it('test presence of added methods to the MongooseArray', function() {\n    var category = new Category(),\n        post     = new Post();\n\n    category.posts.create.should.be.a.Function;\n    post.categories.create.should.be.a.Function;\n\n    category.posts.find.should.be.a.Function;\n    post.categories.find.should.be.a.Function;\n\n    category.posts.populate.should.be.a.Function;\n    post.categories.populate.should.be.a.Function;\n\n    category.posts.remove.should.be.a.Function;\n    post.categories.remove.should.be.a.Function;\n\n    category.posts.append.should.be.a.Function;\n    post.categories.append.should.be.a.Function;\n\n    category.posts.concat.should.be.a.Function;\n    post.categories.concat.should.be.a.Function;\n  });\n\n  it('instantiates one child document', function(){\n    var category = new Category(),\n        post = { title: 'Easy relationships with mongoose-relationships' };\n\n    var built = category.posts.build(post);\n\n    built.should.be.an.instanceof(Post);\n    built.categories.should.containEql(category._id);\n    category.posts.should.containEql(built._id);\n\n    category.posts.should.have.length(1);\n  });\n\n  it('instantiates many children documents', function(done) {\n    var category = new Category(),\n        posts    = [{}, {}];\n\n    var built = category.posts.build(posts);\n\n    category.posts.should.have.length(2);\n\n    var count = category.posts.length;\n    built.forEach(function(post){\n      post.should.be.an.instanceof(Post);\n      post.categories.should.containEql(category._id);\n      category.posts.should.containEql(post._id);\n      --count || done();\n    });\n  });\n\n  it('appends an instantiated child document', function(done) {\n    var category = new Category(),\n        post     = new Post();\n\n    category.posts.append(post, function(err, post){\n      should.strictEqual(err, null);\n\n      post.categories.should.containEql(category._id);\n      category.posts.should.containEql(post._id);\n\n      done();\n    });\n  });\n\n  it('concates many instantiated child documents', function(done) {\n    var category = new Category(),\n        posts    = [new Post(), new Post()];\n\n    category.posts.concat(posts, function(err, posts){\n      should.strictEqual(err, null);\n\n      var count = posts.length;\n      posts.forEach(function(post){\n        post.categories.should.containEql(category._id);\n        category.posts.should.containEql(post._id);\n        --count || done();\n      });\n    });\n  });\n\n  it('creates one child document', function(done) {\n    var category = new Category(),\n        post = { title: 'Easy relationships with mongoose-relationships' };\n\n    category.posts.create(post, function(err, category, post){\n      should.strictEqual(err, null);\n\n      category.should.be.an.instanceof(Category);\n      category.posts.should.have.length(1);\n\n      category.posts[0].should.equal(post._id);\n\n      post.should.be.an.instanceof(Post);\n      post.title.should.equal('Easy relationships with mongoose-relationships')\n      post.categories.should.containEql(category._id);\n\n      done();\n    });\n  });\n\n  it('creates many child documents', function(done){\n    var category = new Category();\n        posts    = [ { title: 'Blog post #1' },\n                     { title: 'Blog post #2' } ]\n\n    category.posts.create(posts, function(err, category, posts){\n      should.strictEqual(err, null);\n\n      category.posts.should.have.length(2);\n\n      posts.should.have.length(2);\n\n      var count = posts.length;\n      posts.forEach(function(post){\n        category.posts.should.containEql(post._id)\n        post.should.be.an.instanceof(Post);\n        post.categories.should.containEql(category._id);\n        --count || done();\n      });\n    });\n  });\n\n  it('finds children documents', function(done){\n    var category = new Category(),\n        posts    = [ { title: 'Blog post #1' },\n                     { title: 'Blog post #2' } ]\n\n    category.posts.create(posts, function(err, category, posts){\n      var find = category.posts.find({}, function(err, newPosts){\n        should.strictEqual(err, null);\n\n        find.should.be.an.instanceof(mongoose.Query);\n        find._conditions.should.have.property('_id');\n        find._conditions.should.have.property('categories');\n        find._conditions._id['$in'].should.be.an.instanceof(Array);\n\n        var testFind = function(){\n          find.find({title: 'Blog post #1'}, function(err, otherPosts){\n            find._conditions.title.should.equal('Blog post #1');\n            find._conditions.should.have.property('_id');\n\n            otherPosts.should.have.length(1);\n            otherPosts[0].title.should.equal('Blog post #1');\n\n            done();\n          });\n        };\n\n        var count = newPosts.length;\n        newPosts.should.have.length(2);\n        newPosts.forEach(function(post){\n          category.posts.should.containEql(post._id)\n          post.should.be.an.instanceof(Post);\n          post.categories.should.containEql(category._id);\n          --count || testFind();\n        });\n      });\n    });\n  });\n\n  it('deletes dependent', function(done){\n    var category = new Category(),\n        posts    = [ { title: 'Blog post #1' },\n                     { title: 'Blog post #2' } ]\n\n    category.posts.create(posts, function(err, category, posts){\n      var post = posts[0];\n\n      category.posts.remove(post._id, function(err, category){\n        should.strictEqual(err, null);\n\n        category.posts.should.not.containEql(post._id);\n        category.posts.should.have.length(1);\n\n        // Post, should still exist, this is HABTM\n        Post.findById(post._id, function(err, post){\n          should.strictEqual(err, null);\n\n          should.exist(post);\n\n          post.categories.should.not.containEql(category._id);\n          post.categories.should.have.length(0);\n\n          post.categories.create({}, function(err, post, category){\n\n            post.categories.remove(category._id, function(err, post){\n              should.strictEqual(err, null);\n\n              // Deletes the category reference in the post\n              post.categories.should.not.containEql(category._id);\n              post.categories.should.have.length(0);\n\n              // ... but shouldn't have in the category's post (no dependent: delete);\n              Category.findById(category._id, function(err, category){\n                should.strictEqual(err, null);\n\n                category.posts.should.containEql(post._id);\n                category.posts.should.have.length(1);\n\n                done();\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n\n  it('populations of path', function(done){\n    var category = new Category(),\n         posts = [ { title: 'Blog post #1' },\n                   { title: 'Blog post #2' } ];\n\n    category.posts.create(posts, function(err, category, posts){\n      category.save(function(err, category){\n        Category.findById(category._id).populate('posts').exec(function(err, populatedCategory){\n          should.strictEqual(err, null);\n\n          // Syntactic sugar\n          var testSugar = function(){\n            category.posts.populate(function(err, category){\n              should.strictEqual(err, null);\n\n              var count = category.posts.length;\n              category.posts.forEach(function(post){\n                post.should.be.an.instanceof(Post);\n                --count || done();\n              });\n            });\n          };\n\n          var count = populatedCategory.posts.length;\n          populatedCategory.posts.forEach(function(post){\n            post.should.be.an.instanceof(Post);\n            --count || testSugar();\n          });\n        });\n      });\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-mongo-relation/node_modules/mongo-relation/specs/hasMany.spec.js":"require('./spec_helper');\n\nvar mongoose = require('mongoose'),\n    should   = require('should'),\n    User     = require('./support/userModel'),\n    Tweet    = require('./support/tweetModel'),\n    Tag      = require('./support/tagModel');\n\ndescribe('hasMany', function() {\n  it('has hasMany on the path', function() {\n    User.schema.paths.tweets.options.hasMany.should.equal('Tweet');\n  });\n\n  it('instantiates one child document', function() {\n    var user  = new User({}),\n        tweet = { title: 'Easy relationships with mongoose-relationships' };\n\n    var built = user.tweets.build(tweet);\n\n    built.should.be.an.instanceof(Tweet);\n    built.author.should.eql(user._id);\n    built.title.should.equal('Easy relationships with mongoose-relationships')\n\n    user.tweets.should.have.length(1);\n  });\n\n  it('instantiates many children documents', function(done) {\n    var user   = new User(),\n        tweets = [{}, {}];\n\n    var built = user.tweets.build(tweets);\n\n    user.tweets.should.have.length(2);\n\n    var count = built.length;\n    built.forEach(function(tweet){\n      tweet.should.be.an.instanceof(Tweet);\n      tweet.author.should.eql(user._id);\n      --count || done();\n    });\n  });\n\n  it('appendes an instantiated child document', function(done) {\n    var user  = new User(),\n        tweet = new Tweet();\n\n    user.tweets.append(tweet, function(err, tweet) {\n      should.strictEqual(err, null);\n      tweet.author.should.eql(user._id);\n      user.tweets.should.containEql(tweet._id);\n      done();\n    });\n  });\n\n  it('concates many instantiated child documents', function(done) {\n    var user   = new User(),\n        tweets = [ new Tweet(), new Tweet() ];\n\n    user.tweets.concat(tweets, function(err, tweets) {\n      should.strictEqual(err, null);\n\n      var count = tweets.length;\n      tweets.forEach(function(tweet){\n        tweet.author.should.eql(user._id);\n        user.tweets.should.containEql(tweet._id);\n        --count || done();\n      });\n    });\n  });\n\n  it('creates one child document', function(done) {\n    var user  = new User(),\n        tweet = { title: 'Easy relationships with mongoose-relationships' };\n\n    user.tweets.create(tweet, function(err, user, tweet) {\n      should.strictEqual(err, null);\n\n      user.should.be.an.instanceof(User);\n      user.tweets.should.have.length(1);\n      user.tweets[0].should.equal(tweet._id);\n\n      tweet.should.be.an.instanceof(Tweet);\n      tweet.title.should.equal('Easy relationships with mongoose-relationships')\n      tweet.author.should.equal(user._id);\n      done();\n    });\n  });\n\n  it('creates many children documents', function(done) {\n    var user = new User(),\n        tweets = [ { title: 'Blog tweet #1' },\n                   { title: 'Blog tweet #2' } ];\n\n    user.tweets.create(tweets, function(err, user, tweets) {\n      should.strictEqual(err, null);\n\n      user.tweets.should.have.length(2);\n      tweets.should.have.length(2);\n\n      var count = tweets.length;\n      tweets.forEach(function(tweet) {\n        user.tweets.should.containEql(tweet._id)\n        tweet.should.be.an.instanceof(Tweet);\n        tweet.author.should.equal(user._id);\n        --count || done()\n      });\n    });\n  });\n\n  it('finds children documents', function(done) {\n    var user   = new User(),\n        tweets = [ { title: 'Blog tweet #1' },\n                   { title: 'Blog tweet #2' } ]\n\n    user.tweets.create(tweets, function(err, user, tweets) {\n      var find = user.tweets.find({}, function(err, newTweets) {\n        should.strictEqual(err, null);\n\n        find.should.be.an.instanceof(mongoose.Query);\n        find._conditions.should.have.property('_id');\n        find._conditions.should.have.property('author');\n        find._conditions._id['$in'].should.be.an.instanceof(Array);\n\n        var search = function() {\n          find.find({ title: 'Blog tweet #1' }, function(err, otherTweets) {\n            find._conditions.title.should.equal('Blog tweet #1');\n            find._conditions.should.have.property('_id');\n\n            otherTweets.should.have.length(1);\n            otherTweets[0].title.should.equal('Blog tweet #1');\n            done();\n          });\n        };\n\n        newTweets.should.have.length(2);\n\n        var count = newTweets.length;\n        newTweets.forEach(function(tweet) {\n          user.tweets.should.containEql(tweet._id)\n          tweet.should.be.an.instanceof(Tweet);\n          tweet.author.should.eql(user._id);\n          --count || search();\n        });\n      });\n    });\n  });\n\n  it('deletes dependents', function(done) {\n    var user   = new User(),\n        tweets = [ { title: 'Blog tweet #1' },\n                   { title: 'Blog tweet #2' } ];\n\n    user.tweets.create(tweets, function(err, user, tweets){\n      var tweet = tweets[0];\n      user.tweets.remove(tweet._id, function(err, user){\n        should.strictEqual(err, null);\n\n        user.tweets.should.not.containEql(tweet._id);\n        user.tweets.should.have.length(1);\n\n        // Tweet, be gone!\n        Tweet.findById(tweet._id, function(err, found){\n          should.strictEqual(err, null);\n          should.not.exist(found);\n          done();\n        });\n      });\n    });\n  });\n\n  it('nullifies dependents', function(done){\n    var user = new User(),\n        tags = [ { name: 'awesome' },\n                 { name: 'omgbbq' } ];\n\n    user.tags.create(tags, function(err, user, tags){\n      var tag = tags[0];\n      user.tags.remove(tag._id, function(err, user){\n        should.strictEqual(err, null);\n\n        user.tags.should.not.containEql(tag._id);\n        user.tags.should.have.length(1);\n\n        // Tweet, be nullified!\n        Tag.findById(tag._id, function(err, tag){\n          should.strictEqual(err, null);\n          should.not.exist(tag.user);\n          done();\n        });\n      });\n    });\n  });\n\n  it('test population of path', function(done){\n    var user   = new User(),\n        tweets = [ { title: 'Blog tweet #1' },\n                   { title: 'Blog tweet #2' } ];\n\n    user.tweets.create(tweets, function(err, user, tweets){\n      user.save(function(err, user){\n        User.findById(user._id).populate('tweets').exec(function(err, populatedUser){\n          should.strictEqual(err, null);\n\n          var testSugar = function(){\n            // Syntactic sugar\n            user.tweets.populate(function(err, user){\n              should.strictEqual(err, null);\n\n              var count = user.tweets.length;\n              user.tweets.forEach(function(tweet){\n                tweet.should.be.an.instanceof(Tweet);\n                --count || done();\n              });\n            });\n          };\n\n          var count = populatedUser.tweets.length;\n          populatedUser.tweets.forEach(function(tweet){\n            tweet.should.be.an.instanceof(Tweet);\n            --count || testSugar();\n          });\n        });\n      });\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-mongo-relation/node_modules/mongo-relation/specs/hasOne.spec.js":"require('./spec_helper');\n\nvar mongoose = require('mongoose'),\n    should   = require('should'),\n    User     = require('./support/userModel'),\n    Tweet    = require('./support/tweetModel'),\n    Tag      = require('./support/tagModel'),\n    Post     = require('./support/postModel');\n\ndescribe('hasOne', function() {\n  it('adds the belongsTo path to the child schema', function() {\n    Tweet.schema.paths.author.options.belongsTo.should.equal('User');\n  });\n\n  it('adds the belongsTo path to the child schema', function() {\n    Post.schema.paths.editor.options.belongsTo.should.equal('User');\n  });\n\n  it('adds the hasOne path to the parent schema', function() {\n    User.schema.paths.post.options.hasOne.should.equal('Post');\n  });\n\n  it.skip('has a create function on the association', function() {\n    var user = new User();\n    user.post.create.should.be.a.Function;\n  });\n\n  it.skip('creates a child document', function(done){\n    var user = new User(),\n        post = { title: 'Deep thinking, by a mongoose.' };\n\n    user.post.create(post, function(err, user, post){\n      should.strictEqual(err, null);\n\n      user.should.be.an.instanceof(user);\n      post.should.be.an.instanceof(post);\n\n      user.post.should.eql(post._id);\n      post.editor.should.equal(user._id);\n\n      post.title.should.equal('Deep thinking, by a mongoose.');\n      done();\n    });\n  });\n\n  it.skip('finds the child document', function(done){\n    var user = new User(),\n        post = { title: 'Deep thinking, by a mongoose.'};\n\n    user.post.create(post, function(err, user, post){\n      var find = user.post.find(function(err, newPost){\n        should.strictEqual(err, null);\n\n        find.should.be.an.instanceof(mongoose.Query);\n        find._conditions.should.have.property('_id');\n        find._conditions.should.have.property('editor');\n        find.op.should.equal('findOne');\n\n        user.post.should.equal(newPost._id);\n\n        newPost.should.be.an.instanceof(post);\n        newPost.editor.should.eql(user._id);\n        done();\n      });\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-mongo-relation/node_modules/mongo-relation/specs/mongoose_array.spec.js":"require('./spec_helper');\n\nvar mongoose = require('mongoose'),\n    should   = require('should'),\n    User     = require('./support/userModel');\n\ndescribe('additions to mongoose array prototype', function(){\n  beforeEach(function(){\n    this.user = new User({});\n  });\n\n  it('adds a create methods to the association', function(){\n    this.user.tweets.create.should.be.a.Function;\n  });\n\n  it('adds a find methods to the association', function(){\n    this.user.tweets.find.should.be.a.Function;\n  });\n\n  it('adds a populate methods to the association', function(){\n    this.user.tweets.populate.should.be.a.Function;\n  });\n\n  it('adds a remove methods to the association', function(){\n    this.user.tweets.remove.should.be.a.Function;\n    this.user.tweets.delete.should.be.a.Function;\n    this.user.tweets.remove.should.eql(this.user.tweets.delete);\n  });\n\n  it('adds a append methods to the association', function(){\n    this.user.tweets.append.should.be.a.Function;\n  });\n\n  it('adds a concat methods to the association', function(){\n    this.user.tweets.concat.should.be.a.Function;\n  });\n});\n"}